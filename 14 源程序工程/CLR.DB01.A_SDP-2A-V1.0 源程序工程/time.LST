C51 COMPILER V9.52.0.0   TIME                                                              12/05/2016 09:37:58 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE TIME
OBJECT MODULE PLACED IN time.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE time.c COMPACT BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /************************************************************************************
   2          * 功能说明：
   3          * 定时器处理函数
   4          
   5          ************************************************************************************/
   6          
   7          #include "stc15w4k32s4.h"
   8          #include "unit.h"
   9          #include "harddrive.h"
  10          #include "uart1.h"
  11          #include "ds18b20.h"
  12          #include "moto.h"
  13          #include "comwithpc.h"
  14          #include "time.h"
  15          
  16          /********************************************************************
  17          函数功能：初始化定时器0，每5ms产生一个中断。
  18          入口参数：无。
  19          返    回：无。
  20          备    注：无。
  21          ********************************************************************/
  22          void InitTimer0(void)
  23          {
  24   1        
  25   1        //AUXR|=0x80;   //设置定时器0为1T模式，默认为12T模式
  26   1        
  27   1        TMOD&=(~0x03);  //设置Timer0工作在模式0(16位自动重载模式)
  28   1      
  29   1        /*系统时钟选择为11.0592M时， 重载值的计算如下：   
  30   1        11059200/12分频/200=4608，即每计数4608耗时为5ms。*/ 
  31   1        TH0 = (65536-SYSCLK/12/200)>>8;   //初始化Timer0重载值
  32   1        TL0 = (65536-SYSCLK/12/200);    //初始化Timer0重载值
  33   1        
  34   1        ET0=1;      //Timer0中断使能
  35   1        TR0 = 1;    //Timer0开启
  36   1      }
  37          /**///////////////////////Pino Electronics////////////////////////**/
  38          
  39          
  40          extern u8 Sensor_P0_flag;       //切刀传感器动作标识
  41          extern u8 Sensor_P0_new_state;  //切刀传感器动作标识
  42          extern u8 Sensor_P0_old_state;  //切刀传感器动作标识
  43          
  44          extern u8 Sensor_P1_flag;       //切刀传感器动作标识
  45          extern u8 Sensor_P1_new_state;  //切刀传感器动作标识
  46          extern u8 Sensor_P1_old_state;  //切刀传感器动作标识
  47          
  48          //胶片进入通道口传感器
  49          extern u8 Sensor_P2_flag;     //切刀传感器动作标识
  50          extern u8 Sensor_P2_f10;      //状态由1--0 
  51          extern u8 Sensor_P2_f01;      //状态由0--1
  52          extern u8 Sensor_P2_new_state;  //切刀传感器动作标识
  53          extern u8 Sensor_P2_old_state;  //切刀传感器动作标识
  54          //extern u32 Sensor_P2_f10_count;    //完成之后延时停止计数
  55          extern u8 Sensor_P2_Moto_Stop_flag;   //慢转停止标志
C51 COMPILER V9.52.0.0   TIME                                                              12/05/2016 09:37:58 PAGE 2   

  56          
  57          
  58          //extern u8 Sensor_P3_flag;       //切刀传感器动作标识
  59          extern u8 Sensor_P3_new_state;  //切刀传感器动作标识
  60          extern u8 Sensor_P3_old_state;  //切刀传感器动作标识
  61          
  62          
  63          //extern u8 Sensor_P4_flag;       //切刀传感器动作标识
  64          extern u8 Sensor_P4_new_state;  //切刀传感器动作标识
  65          extern u8 Sensor_P4_old_state;  //切刀传感器动作标识
  66          
  67          
  68          extern u8 Sensor_P5_flag_start;   //标识是否需要进行出片检测
  69          extern u8 Sensor_P5_flag;         //出片口传感器  从高--变低--变高  表示胶片正常输出。  1 表示正常输出
  70          extern u8 Sensor_P5_f10;          //出片口传感器  从高--变低 标识
  71          
  72          extern u8 Sensor_P5_new_state;    //传感器当前状态
  73          extern u8 Sensor_P5_old_state;    //传感器上一次状态
  74          
  75          extern u8 Sensor_P5_OK_flag;    //传感器检测完成标志
  76          extern u8 Sensor_P5_OK_flag_count;    //完成之后延时两秒计数
  77          
  78          
  79          
  80          extern u8 Sensor_P6_flag;            //码盘传感标识 
  81          extern u8 Sensor_P6_SendPaper_flag;  //码盘传感标识 
  82          extern u8 Sensor_P6_new_state;
  83          extern u8 Sensor_P6_old_state;
  84          
  85          extern u16 Sensor_P6_flag_cont;     //加热步数计数器
  86          extern u8 Sensor_P6_cont_start;     //加热行程开始计数标识
  87          extern u16 Sensor_P6_SendPaper_flag_cont; //加热步数计数器
  88          extern u16 SendPaper_P6_Time_Flag_start; // 送纸超时计数开始标志
  89           
  90          
  91          extern volatile u8 MOTO_DC1_Run_Time;  //电机运行时间
  92          extern volatile u8 MOTO_DC2_Run_Time;  //电机运行时间
  93          
  94          extern volatile u32 DC1_Run_Time_count;  //定时器中PWM 计数值
  95          extern volatile u32 DC2_Run_Time_count;  //定时器中PWM 计数值
  96          
  97          
  98          extern volatile u8 PWM1count;  //定时器中PWM 计数值
  99          extern volatile u8 PWM2count;  //定时器中PWM 计数值
 100          
 101          extern volatile u8 PWM1time;  //PWM 占空比值   
 102          extern volatile u8 PWM2time;  //PWM 占空比值  
 103          
 104          extern volatile u8 PWMDC1Direction;  //电机1 方向标志  1 正转  2 反转
 105          extern volatile u8 PWMDC2Direction;  //电机2 方向标志  1 正转  2 反转
 106          
 107          extern volatile u8 DC1Run;  //电机1 方向标志  1 正转  2 反转
 108          extern volatile u8 DC2Run;  //电机2 方向标志  1 正转  2 反转
 109          
 110          extern volatile  u8 Heat_Time;  //胶片留在通道中的加热时间。 单位 秒
 111          extern volatile  u8 Heat_Time_Flag;  //胶片加热完成标志
 112          extern volatile  u8 Heat_Time_Flag_start;  //胶片开始加热计时标志
 113          
 114          extern volatile u8 MOTO2_LH_Control;  //电机2 离合控制
 115          extern volatile u8 MOTO2_LH_Flag;  //电机2 离合控制
 116          
 117          
C51 COMPILER V9.52.0.0   TIME                                                              12/05/2016 09:37:58 PAGE 3   

 118          extern volatile  u32 JiuXu_Count;  //胶片加热完成标志
 119          extern volatile  u8 JiuXu_Count_start;  //胶片加热完成标志
 120          
 121          extern volatile u8 Paper_Send_OK;   //卡片标志
 122          
 123          
 124          extern u8 sys_init_state; //系统初始化完成标志
 125          
 126          
 127          extern volatile s16 temputer1;
 128          extern volatile s16 temputer2;
 129          
 130          extern volatile s16 Heart_Open;   //开启心跳标志
 131          extern volatile u8  Heart_flag;   //无心跳标志
 132          extern volatile u32 Heart_Count;  //心跳超时计数
 133          
 134          
 135          
 136          extern volatile  u32 auto_paper_a4_Count;  //报告送纸延时计数
 137          extern volatile  u32 auto_paper_a4_Count2;  //报告送纸计数--超时计数
 138          extern volatile  u8 auto_paper_a4_Count_Flag;  //报告送纸标志
 139          extern volatile  u8 auto_paper_a4_Max_Flag;  //报告超时标志
 140          
 141          
 142          /************************定时器延时变量***********************/
 143          /********************************************************************
 144          函数功能：延时函数。
 145          入口参数：无。
 146          返    回：无。
 147          备    注：无。
 148          ********************************************************************/
 149          extern volatile u8 Delay_start;  //定时器中PWM 计数值   占空比
 150          extern volatile u8 Delay_num;  //定时器中PWM 计数值   占空比
 151          extern volatile u8 Delay_count;  //定时器中PWM 计数值   占空比
 152          extern volatile u8 Delay_flag;  //定时器中PWM 计数值   占空比
 153          
 154          
 155          /********************************************************************
 156          函数功能：定时器0的中断服务程序。  5ms 一次中断
 157          入口参数：无。
 158          返    回：无。
 159          备    注：中断标志位自动清除。
 160          ********************************************************************/
 161          void Timer0ISR(void) interrupt 1
 162          { 
 163   1        static u16 count=0;  //心跳灯计数 
 164   1        static u16 counttemp=998; //温度传感器计数
 165   1        static u16 count3=0;  //切刀检测传感器定时
 166   1        
 167   1        static u16 HeatCount=0;  //切刀检测传感器定时 
 168   1        
 169   1        static u16 Sensor_P2_f10_count=0;  //切刀检测传感器定时 
 170   1        
 171   1        count3++;
 172   1        count++;   
 173   1        counttemp++;  
 174   1      
 175   1        
 176   1        //计数器自动重载
 177   1        if(count==200)
 178   1        {   //5ms一次中断，接收到200次中断即为1秒
 179   2          count=0;
C51 COMPILER V9.52.0.0   TIME                                                              12/05/2016 09:37:58 PAGE 4   

 180   2          RunLedTog();    //每1秒闪烁一次LED        
 181   2        } 
 182   1        
 183   1        
 184   1        //计数器自动重载
 185   1        if(counttemp==1000)
 186   1        {   //5ms一次中断，接收到2000次中断即为5秒
 187   2          counttemp=0;
 188   2          HandleDs18b20ReadTemp();  //读取两路温湿度传感器数据 ，
 189   2            
 190   2        } 
 191   1      
 192   1        
 193   1          //需要进行离合控制  ---离合传感器 1--P3  1--P4
 194   1          if(MOTO2_LH_Control==1)    
 195   1          {
 196   2               //离合关到位控制
 197   2               if(MOTO2_LH_Flag==0) 
 198   2               {
 199   3                    Sensor_P3_old_state= Sensor_P3_new_state ;
 200   3                    Sensor_P3_new_state=MOTO_S5S3();    //每20ms 读离合关传感器状态
 201   3                    
 202   3                    if((Sensor_P3_old_state==1) && (Sensor_P3_new_state==0) ) //从低变成高
 203   3                    {
 204   4                        MotoDc2Stop(); 
 205   4                        MOTO2_LH_Control=0;               
 206   4                    }           
 207   3               }
 208   2                //离合开到位控制
 209   2                if(MOTO2_LH_Flag==1) 
 210   2               {
 211   3                Sensor_P4_old_state= Sensor_P4_new_state ;
 212   3                  
 213   3                Sensor_P4_new_state=MOTO_S4S4();    //每20ms 读离合关传感器状态
 214   3                
 215   3                if((Sensor_P4_old_state==1) && (Sensor_P4_new_state==0) ) //从低变成高
 216   3                {
 217   4                    MotoDc2Stop(); 
 218   4                    MOTO2_LH_Control=0;    
 219   4                }
 220   3              }
 221   2          }
 222   1          //end of  离合控制
 223   1        
 224   1        
 225   1        
 226   1         /*
 227   1        //延时计数
 228   1          if(Delay_start==1)  //判断是否需要码盘计数
 229   1          {   
 230   1              Delay_count++ ;   
 231   1              if(Delay_count >= Delay_num)
 232   1              {
 233   1                Delay_flag=1;
 234   1              }           
 235   1          } 
 236   1      
 237   1        */
 238   1        
 239   1      
 240   1          
 241   1        
C51 COMPILER V9.52.0.0   TIME                                                              12/05/2016 09:37:58 PAGE 5   

 242   1        //计数器自动重载
 243   1        if(count3==2)  //每20 ms 查询出片机构相关传感器状态，并置位相关标识
 244   1        {   //5ms一次中断，接收到4次中断即为20ms秒
 245   2          
 246   2          
 247   2          count3=0; //计数器重载
 248   2          
 249   2          //起始切刀传感器状态处理
 250   2          Sensor_P0_old_state=Sensor_P0_new_state;   //保存老的状态
 251   2          Sensor_P0_new_state=MOTO_S8S0(); 
 252   2          if( (Sensor_P0_old_state==1) && (Sensor_P0_new_state==0)) // 从高变成低
 253   2          {
 254   3                Sensor_P0_flag=1;      //切刀开始动作
 255   3          }
 256   2          
 257   2          //结束切刀传感器状态处理
 258   2          Sensor_P1_old_state= Sensor_P1_new_state ;    
 259   2          Sensor_P1_new_state=MOTO_S7S1();    
 260   2          if((Sensor_P1_old_state==0) && (Sensor_P1_new_state==1) ) //从低变成高
 261   2          {
 262   3              Sensor_P1_flag=1;      //切刀结束动作
 263   3          }
 264   2          
 265   2          //判断通道入口是否有胶片  
 266   2          Sensor_P2_old_state= Sensor_P2_new_state ;    
 267   2          Sensor_P2_new_state=MOTO_S6S2();  
 268   2          
 269   2          //从高变低，胶片进入通道口
 270   2          if((Sensor_P2_old_state==1) && (Sensor_P2_new_state==0) ) //有胶片进入通道口
 271   2          {   
 272   3              Sensor_P2_f10=1;
 273   3              Sensor_P2_flag=0;  
 274   3              Sensor_P2_Moto_Stop_flag=0;    //清除慢转停止标志 
 275   3          }
 276   2        
 277   2            //从低变高
 278   2          if((Sensor_P2_old_state==0) && (Sensor_P2_new_state==1) ) //有胶片离开通道入口
 279   2          {
 280   3              Sensor_P2_f01=1; 
 281   3              Sensor_P2_flag=0; 
 282   3              
 283   3              //清除慢转计数标志
 284   3              Sensor_P2_f10=0;
 285   3              Sensor_P2_f10_count=0;
 286   3            
 287   3              Sensor_P2_Moto_Stop_flag=1;    //清除慢转停止标志       
 288   3                    
 289   3          }
 290   2            
 291   2        
 292   2          
 293   2          //出片报告检测，判断是否正常出片 
 294   2          if(Sensor_P5_flag_start==1)  //需要进行出片口报告检测 
 295   2          {   
 296   3                Sensor_P5_old_state= Sensor_P5_new_state ; //保存旧状态     
 297   3                Sensor_P5_new_state=MOTO_S3S5();    //获取新状态  
 298   3                //出片过程 传感器状态为 1----0----1
 299   3                //首先判断 1--0
 300   3                if((Sensor_P5_old_state==1) && (Sensor_P5_new_state==0) ) //从高变低
 301   3                {
 302   4                  
 303   4                  Sensor_P5_f10=1;  //胶片正在输出
C51 COMPILER V9.52.0.0   TIME                                                              12/05/2016 09:37:58 PAGE 6   

 304   4                    
 305   4                } 
 306   3                
 307   3                if(Sensor_P5_f10==1)
 308   3                {       
 309   4                   
 310   4                  if((Sensor_P5_old_state==0) && (Sensor_P5_new_state==1) )
 311   4                  { 
 312   5             
 313   5                    Sensor_P5_OK_flag=1;  //置完成标志  
 314   5                    
 315   5                  }
 316   4      
 317   4                }  
 318   3                
 319   3          } 
 320   2            
 321   2          //胶片输送完成延时
 322   2          if(Sensor_P5_OK_flag==1)
 323   2          {
 324   3            Sensor_P5_OK_flag_count++;    
 325   3            //清超时标志
 326   3            SendPaper_P6_Time_Flag_start=0;  //关计数标志
 327   3            Sensor_P6_SendPaper_flag=0;  // 清标志
 328   3            
 329   3                    //计数器自动重载
 330   3                if(Sensor_P5_OK_flag_count==200)  //1s
 331   3                { 
 332   4                  //此处延时两秒  等待胶片完全输出  
 333   4                  Sensor_P5_OK_flag_count=0;
 334   4                  Sensor_P5_OK_flag=0;
 335   4                  //置标志
 336   4                  Sensor_P5_flag=1;      //胶片输出完毕
 337   4                  Sensor_P5_f10=0;
 338   4                }             
 339   3          }
 340   2          
 341   2              
 342   2          //码盘  1--P6 计数处理
 343   2          if(Sensor_P6_cont_start==1)  //判断是否需要码盘计数
 344   2          {   
 345   3                Sensor_P6_old_state= Sensor_P6_new_state ; //保存旧状态     
 346   3                Sensor_P6_new_state=MOTO_S2S6();    //获取新状态  
 347   3                // 新旧状态不一致 计数器加1
 348   3                if( Sensor_P6_old_state != Sensor_P6_new_state) //转一圈 计数 四次
 349   3                {
 350   4                    Sensor_P6_flag_cont++ ; 
 351   4                    if(Sensor_P6_flag_cont == MAPAN_MAX_CONT)
 352   4                    {
 353   5                      Sensor_P6_flag_cont=0;
 354   5                      Sensor_P6_flag=1;  //置码盘标识  联合出片口传感器判断是否卡片。
 355   5                    }           
 356   4                    
 357   4                }
 358   3          } 
 359   2          
 360   2            
 361   2          //码盘  超时卡片计数
 362   2          if(SendPaper_P6_Time_Flag_start==1)  //判断是否需要码盘计数
 363   2          {   
 364   3              Sensor_P6_SendPaper_flag_cont++ ; 
 365   3            
C51 COMPILER V9.52.0.0   TIME                                                              12/05/2016 09:37:58 PAGE 7   

 366   3              if(Sensor_P6_SendPaper_flag_cont >= MAPAN_SEND_PAPER_CONT)
 367   3              {
 368   4                Sensor_P6_SendPaper_flag_cont=0;
 369   4                SendPaper_P6_Time_Flag_start=0;
 370   4                Sensor_P6_SendPaper_flag=1;  //置码盘标识  联合出片口传感器判断是否卡片。
 371   4              }           
 372   3      
 373   3          } 
 374   2                
 375   2        } 
 376   1        
 377   1        
 378   1          //慢转延时关闭
 379   1          if(Sensor_P2_new_state==0)  //有胶片进入开始计时
 380   1          {
 381   2            Sensor_P2_f10_count++;
 382   2            
 383   2            if(Sensor_P2_f10_count == 6000 )  //
 384   2            { 
 385   3               Sensor_P2_f10_count=0;       
 386   3               Sensor_P2_Moto_Stop_flag=1;
 387   3            }   
 388   2            
 389   2          }
 390   1      
 391   1      
 392   1        // 电机运行时间控?
 393   1        DC1_Run_Time_count++;
 394   1        DC2_Run_Time_count++;
 395   1        
 396   1        if( DC1_Run_Time_count >= (MOTO_DC1_Run_Time*200))
 397   1        {
 398   2          DC1Run=0;
 399   2          MOTO_DC1_Run_Time=0;
 400   2          DC1_Run_Time_count=0;
 401   2          MotoDc1Stop();
 402   2        }
 403   1        
 404   1          if( DC2_Run_Time_count >= (MOTO_DC2_Run_Time*200))
 405   1        {
 406   2          DC2Run=0;
 407   2          MOTO_DC2_Run_Time=0;
 408   2          DC2_Run_Time_count=0;
 409   2          
 410   2          MotoDc2Stop();
 411   2        }
 412   1        
 413   1      
 414   1        //胶片停留加热时间控制
 415   1          if(Heat_Time_Flag_start==1)
 416   1          {   
 417   2              HeatCount++;
 418   2            
 419   2              if(HeatCount == 600) // 2000--10s  600--3S
 420   2              {
 421   3                HeatCount=0;
 422   3                
 423   3                Heat_Time_Flag=1;
 424   3                
 425   3                Heat_Time_Flag_start=0;     
 426   3              }
 427   2          } 
C51 COMPILER V9.52.0.0   TIME                                                              12/05/2016 09:37:58 PAGE 8   

 428   1          
 429   1          //胶片正常输出到 就绪 时间
 430   1          if(JiuXu_Count_start==1)
 431   1          {   
 432   2              JiuXu_Count++;
 433   2            
 434   2              if(JiuXu_Count >= 1600) // 2000--10s  600--3S
 435   2              {
 436   3                JiuXu_Count=0;
 437   3                
 438   3                Paper_Send_OK=1;   //置就绪标志
 439   3                //测试语句
 440   3                HeatFanOff(); //关加热风扇
 441   3                JiuXu_Count_start=0;      
 442   3              }
 443   2         }  
 444   1         
 445   1         
 446   1            //心跳控制
 447   1          if(Heart_Open==1)
 448   1          {   
 449   2              Heart_Count++;
 450   2            
 451   2              //if(Heart_Count >= 20000) // 1000S  16分钟
 452   2              if(Heart_Count >= 200000) // 1000S  16分钟  
 453   2              {
 454   3                
 455   3                Heart_flag=0;   
 456   3                    
 457   3              }
 458   2         }
 459   1         
 460   1         //送报告电机延时计数
 461   1         if(auto_paper_a4_Count_Flag==1)
 462   1         {
 463   2              auto_paper_a4_Count++;
 464   2           
 465   2              if(auto_paper_a4_Count==1600)  //5秒关闭
 466   2              {
 467   3                  auto_paper_a4_Count=0;
 468   3                
 469   3                  auto_paper_a4_Count_Flag=0;
 470   3              }
 471   2      
 472   2         }
 473   1        
 474   1         /*  
 475   1         //送报告电机超时计数
 476   1          //送报告电机延时计数
 477   1         if(BaoGaoLed==1)  //开启了报告灯，或者开启了电机
 478   1         {
 479   1              auto_paper_a4_Count2++;
 480   1              if(auto_paper_a4_Count2 > 3000)  //15S 超时
 481   1              {
 482   1                  auto_paper_a4_Max_Flag=1;
 483   1                  auto_paper_a4_Count2=0;
 484   1                  BaoGaoLedOff(); //关电机
 485   1              }
 486   1         }
 487   1          
 488   1         */
 489   1      }
C51 COMPILER V9.52.0.0   TIME                                                              12/05/2016 09:37:58 PAGE 9   

 490          
 491          /**///////////////////////Pino Electronics////////////////////////**/
 492          
 493          /********************************************************************
 494          函数功能：初始化定时器2，每10ms产生一个中断。
 495          入口参数：无。
 496          返    回：无。
 497          备    注：Timer2的工作模式只有一种：16位自动重载模式。
 498          ********************************************************************/
 499          /*
 500          void Timer2Init(void)   //1毫秒@11.0592MHz
 501          {
 502            AUXR |= 0x04;   //定时器时钟1T模式
 503            T2L = 0xCD;   //设置定时初值
 504            T2H = 0xD4;   //设置定时初值
 505            
 506            IE2|=0x04;    //Timer2中断使能
 507            AUXR |= 0x10;   //定时器2开始计时
 508          }
 509          
 510          */
 511          
 512          
 513          void Timer2Init(void)   //100微秒@11.0592MHz
 514          {
 515   1        AUXR |= 0x04;   //定时器时钟1T模式
 516   1        T2L = 0xAE;   //设置定时初值
 517   1        T2H = 0xFB;   //设置定时初值
 518   1        IE2|=0x04;    //Timer2中断使能
 519   1        AUXR |= 0x10;   //定时器2开始计时
 520   1      }
 521          
 522          
 523          /********************************************************************
 524          函数功能：定时器2的中断服务程序。
 525          入口参数：无。
 526          返    回：无。
 527          // 在定时器2中做电机PWM输出控制
 528          //主要控制电机占空比等内容。
 529          备    注：中断标志位自动清除。
 530          ********************************************************************/
 531          //100微秒@11.0592MHz
 532          
 533          //电机控制程序，在定时器2中进行 
 534          void Timer2ISR(void) interrupt 12
 535          { 
 536   1        // 采用PWM 控制后不在这里处理
 537   1        
 538   1      }
 539          /**///////////////////////Pino Electronics////////////////////////**/JM
 540          
 541          
 542          
 543          
 544          
 545          
 546          
 547          
 548          
 549          
 550          
 551          
C51 COMPILER V9.52.0.0   TIME                                                              12/05/2016 09:37:58 PAGE 10  

 552          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1037    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     10    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
